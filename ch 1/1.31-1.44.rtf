{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\fmodern\fcharset0 Courier;\f2\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 1.33 count\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs24 \cf2 int main() \{\
    int arr[] = \{1, 3, 2, 1\};\
    cout<< count(begin(arr), end(arr), 1);//2\
    return 0;\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf2 1.34 fill\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs24 \cf2 int main() \{\
    int arr[] = \{1, 3, 2, 1\};\
    fill(begin(arr), end(arr), 1);\
    for(auto x:arr) cout<<x<<' ';\
	//copy(begin(array),end(array),ostream_iterator<int>(cout, " "));\
    return 0;\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf2 1.35 inner_product\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0\fs24 \cf2 inner_product(start1, end1, start2, end2, initialValue);\
\pard\pardeftab720\partightenfactor0

\f1 \cf2 #include <iostream>\
#include <numeric>\
\
int main() \{\
  int array_1[] = \{1, 2, 3, 4, 5, 6, 7, 8\};\
  int array_2[] = \{1, 2, 3, 4, 5, 6, 7, 8\};\
\
 cout << inner_product(begin(array_1), end(array_1),begin(array_2), 0) << endl;\
  return 0;\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf2 1.36 iota\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0\fs24 \cf2 iota(start, end, value);\
\pard\pardeftab720\partightenfactor0

\f1 \cf2 #include <iostream>\
#include <iterator>\
#include <numeric>\
\
int main() \{\
	int numbers[10];\
  std::iota (numbers,numbers+10,100);\
  std::cout << "numbers:";\
  for (int& i:numbers) std::cout << ' ' << i;\
  std::cout << '\\\\n';\
\
  return 0;\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf2 1.37 is_sorted\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0\fs24 \cf2 is_sorted(start, end)\
\pard\pardeftab720\partightenfactor0

\f1 \cf2 #include <algorithm>\
#include <iostream>\
\
int main() \{\
  int array1[] = \{1, 2, 3, 4, 5, 6, 7, 8\};\
  int array2[] = \{1, 2, 3, 4, 5, 6, 7, 8, 0\};\
\
  std::cout << std::is_sorted(std::begin(array1), std::end(array1))\
            << std::endl;\
  std::cout << std::is_sorted(std::begin(array2), std::end(array2))\
            << std::endl;\
  return 0;\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf2 1.38 mismatch\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs24 \cf2 #include<bits/stdc++.h>\
using namespace std;\
int main() \{\
  int array1[] = \{1, 2, 1, 4\};\
  int array2[] = \{1, 2, 3, 4\};\
    auto it = mismatch(begin(array1), end(array1), begin(array2));\
    cout<<it.first<<endl<<it.second<<endl;\
    cout<<*it.first<<endl<<*it.second;\
    return 0;\
\}\
/* output:\
	**0x7ffeb31c8e28\
	0x7ffeb31c8e18\
	1\
	3** \
*/\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf2 1.39 my_count\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs24 \cf2 #include<bits/stdc++.h>\
using namespace std;\
template<typename T, typename N>\
size_t my_count(T start, T end, N value)\{\
    size_t n =0;\
   for(; start != end; start++)\{\
        if(*start == value) n++;\
    \}\
    return n;\
\}\
int main() \{\
    int arr[] = \{1, 2, 1, 1\};\
    cout<< my_count(begin(arr), end(arr), 1);\
    return 0;\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf2 1.40 my_fill\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs24 \cf2 #include<bits/stdc++.h>\
using namespace std;\
template<typename T, typename N>\
void my_fill(T start, T end, N value)\{\
   for(; start != end; start++)\{\
        *start=value;\
    \}\
\}\
int main() \{\
    int arr[] = \{1, 2, 1, 3\};\
    my_fill(begin(arr), end(arr), 1);\
    for(auto x:arr) cout<<x<<' ';\
    return 0;\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf2 1.41 my_inner_product\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs24 \cf2 #include<bits/stdc++.h>\
using namespace std;\
template<typename T, typename N>\
N my_inner_product(T start1, T end1, T start2, N value)\{\
   for(; start1 != end1; start1++,start2++)\{\
        value += *start1 * *start2;\
    \}\
    return value;\
\}\
int main() \{\
    int array_1[] = \{1, 2, 3, 4, 5, 6, 7, 8\};\
    int array_2[] = \{1, 2, 3, 4, 5, 6, 7, 8\};\
    cout << my_inner_product(begin(array_1), end(array_1),begin(array_2), 3) << endl;\
    return 0;\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf2 1.42 my_iota\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs24 \cf2 #include<bits/stdc++.h>\
using namespace std;\
template<typename T, typename N>\
void my_iota(T start, T end, N value)\{\
   for(; start != end; start++,value++)\{\
        *start=value;\
    \}\
\}\
int main() \{\
    int arr[10];\
    my_iota(begin(arr), end(arr), 100);\
    for(auto x:arr) cout<<x<<' ';\
    return 0;\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf2 1.43 my_is_sorted\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs24 \cf2 #include<bits/stdc++.h>\
using namespace std;\
template<typename T>\
bool my_is_sorted(T start, T end)\{\
   for(; start+1 != end; start++)\{\
        if(*start > *(start+1)) return 0;\
    \}\
    return 1;\
\}\
int main() \{\
    int array1[] = \{1, 2, 3, 4, 5, 6, 7, 8\};\
    int array2[] = \{1, 2, 3, 4, 5, 6, 7, 8, 0\};\
    cout << my_is_sorted(begin(array1), end(array1)) << endl;\
    cout << my_is_sorted(begin(array2), end(array2)) << endl;\
    return 0;\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf2 1.44 my_mismatch\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs24 \cf2 #include<bits/stdc++.h>\
using namespace std;\
template<typename T>\
pair<T,T> my_mismatch(T start1, T end1, T start2)\{\
   for(; start1 != end1; start1++,start2++)\{\
        if(*start1 != *start2) break;\
    \}\
    return make_pair(start1, start2);\
\}\
int main() \{\
    int array1[] = \{1, 2, 1, 4\};\
    int array2[] = \{1, 2, 3, 4\};\
    auto it = my_mismatch(begin(array1), end(array1), begin(array2));\
    cout<<it.first<<endl<<it.second<<endl;\
    cout<<*it.first<<endl<<*it.second;\
    return 0;\
\}\
\
}